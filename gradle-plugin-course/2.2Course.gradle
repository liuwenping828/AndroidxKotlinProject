/*
 * 项目结构
 *
 *
 * 上面提到的构建文件中有默认的文件夹结构。Gradle 遵循约定优先于配置的概念，在尽可能的情况下提供合理的默认
 * 配置参数。最基本的项目有两个 “source sets” 组件，分别存放应用代码及测试代码。它们分别位于：
 *
 *  src/main/
 *  src/androidTest/
 *
 * 里面每个存在的文件夹对应相应的源组件。对于 Java plugin 和 Android plugin 来说，它们的 Java 代码和资源
 * 文件路径如下：
 *
 *  java/
 *  resources/
 *
 * 但对于 Android plugin 来说，它还拥有以下特有的文件和文件夹结构：
 *
 *  AndroidManifest.xml
 *  res/
 *  assets/
 *  aidl/
 *  rs/
 *  jni/
 *  jniLibs/
 *
 * 这就意味着在 Android plugin 下 *.java 文件的 source set 路径是 src/main/java，而 manifest 则是
 * src/main/AndroidManifest.xml
 *
 * 注意：src/androidTest/AndroidManifest.xml 会被自动创建，所以一般情况下不需要手动创建。
 *
 *
 * 配置项目结构
 *
 * 当默认的项目结构不适用时，可以自定义配置。查看 Gradle 文档中 Java plugin 部分以了解如何在纯 Java 项目中进行配置。
 *
 * Android plugin 使用了类似的语法，但因为 Android 有自己的 sourceSets，所以需要配置到 android 块中。
 * 下面的例子使用了旧的项目结构(Eclipse)，并把 androidTest 的 sourceSet 映射到 tests 目录中。
 */
apply plugin: 'com.android.application'
android {
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        androidTest.setRoot('tests')
    }
}

/*
 * 注意：因为旧的结构把所有的源文件（Java, AIDL, Renderscript）放在同一个目录中，所以我们需要重新映射所有
 * 的 sourceSet 新组件到同一个 src 目录下。
 *
 * 注意：setRoot() 会移动所有的 sourceSet（包括它的子目录）到新的目录。例子中把 src/androidTest/* 移动到
 * tests/*
 *
 * Android 特有的 sourceSets 在 Java sourceSets 中不起作用。
 */